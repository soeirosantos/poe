buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}")
        classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:${testsets_version}"
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.unbroken-dome.test-sets'

version = '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

    //boot
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-validation"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    runtime "org.springframework.boot:spring-boot-devtools"

    testCompile "org.springframework.boot:spring-boot-starter-test"

    compile "org.springframework.boot:spring-boot-starter-security"

    compile "org.springframework.boot:spring-boot-actuator"

    //database
    compile "com.zaxxer:HikariCP:${hikaricp_version}"
    compile "mysql:mysql-connector-java"
    compile "com.h2database:h2"

    //jackson
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"

    //misc
    compile "org.apache.commons:commons-lang3:${commons_lang_version}"
    compile "commons-io:commons-io:${commons_io_version}"
    compile "commons-codec:commons-codec:${commons_codec_version}"
    compile "io.jsonwebtoken:jjwt:${jjwt_version}"

    compileOnly "org.projectlombok:lombok:${lombok_version}"

    //test
    testCompile "io.rest-assured:rest-assured:${rest_assured_version}"
    compile "io.rest-assured:json-path:${rest_assured_version}"
}

testSets {
    integrationTest { dirName = 'it' }
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/*Config*'])
        })
    }
}